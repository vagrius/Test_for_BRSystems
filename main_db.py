"""
Скрипт, считающий рейтинг рекомендаций к просмотру фильмов на основании записей из таблиц Пользователь -- Просмотренный
фильм.

Логика подсчета рейтинга рекомендаций.
1. Считаем рейтинг совпадений для каждой пары пользователей: это отношение количества просмотренных обоими
пользователями фильмов к общему количеству уникальных просмотренных обоими пользователями фильмов. Чем больше
совпадений, тем выше рейтинг (максимум 1).
2. Для каждого пользователя в паре выбираем фильмы, которые он, по отношению ко второму, не смотрел - их и будем в
дальнейшем рекомендовать.
3. Каждому фильму из п.2 присваиваем коэффициент из п.1.
4. В следующей паре может снова попасться фильм из п.2, но уже с коэффициентом по отношению к другом пользователю -
просто складываем с уже имеющимся.
5. На выходе получится какое-то число - рейтинг.
6. Также учитываем при подсчете кол-во просмотров того или иного фильма, т.к. должно играть роль не только, как сильно
совпадают интересы одного пользователя с другим, но и насколько фильм популярен у всех пользователей.

Итоговый результат выводим в консоль. Если рейтинг фильма - 0, то не учитываем.
"""

import sqlite3

# Создаем подключение к БД
connection = sqlite3.connect("mydatabase.db")
cursor = connection.cursor()

# Выбираем все записи из базы
q = "SELECT * FROM views"
cursor.execute(q)
q_result = cursor.fetchall()

# Формируем словарь, где ключ - пользователь, значение - список просмотренных им фильмов
watched = {}
for row in q_result:
    if not row[0] in watched:
        watched[row[0]] = [row[1]]
    else:
        watched[row[0]].append(row[1])

# Подсчитываем, сколько просмотров за каждым фильмом
q = "SELECT film, COUNT(film) FROM views GROUP BY film"
cursor.execute(q)
q_result = cursor.fetchall()

# Формируем словарь, где ключ - название фильма, значение - кол-во его просмотров всеми пользователями
films_count = {}
for row in q_result:
    films_count[row[0]] = row[1]

# Считаем рейтинг совпадений для каждой пары пользователей
result = {}
for key1, value1 in watched.items():
    for key2, value2 in watched.items():
        if key1 != key2:
            same = list(set(watched[key1]) & set(watched[key2]))  # Множество общих фильмов
            unique = list(set(watched[key1] + watched[key2]))  # Множество уникальных фильмов
            unwatched = list(set(watched[key2]) - set(same))  # Множество непросмотренных первым пользователем фильмов
            rate = len(same) / len(unique)
            for film in unwatched:
                if (key1, film) not in result:
                    result[(key1, film)] = rate
                else:
                    result[(key1, film)] += rate

# Формируем и выводим в консоль итоговый рейтинг
for key, value in result.items():
    final_rate = round(value * (1 + films_count[key[1]] / 10) * 100, 2)
    if final_rate > 0:
        print(key[0], key[1], final_rate, sep=' --- ')
